# -*- coding: utf-8 -*-
"""
Created on Thu Dec  7 09:40:07 2023

Author: yan-s

This script builds the orthogonality graph of Peres' 33 directions.
Nodes correspond to the directions, edges represent orthogonality relations.
"""

import matplotlib.pyplot as plt
import networkx as nx
from itertools import combinations
from copy import deepcopy
from matplotlib import rcParams

# --- Data (hardcoded here, but should ideally be imported from a shared module) ---
directionsPeres = [
    [1.0, 0.0, 1.0], [1.0, 1.0, 0.0],
    [1.0, -0.7071067811865476, -0.7071067811865476],
    [1.0, 0.7071067811865476, -0.7071067811865476],
    [1.0, -0.7071067811865476, 0.7071067811865476],
    [1.0, 0.7071067811865476, 0.7071067811865476],
    [1.0, -0.7071067811865475, 0.0],
    [1.0, 0.7071067811865475, 0.0],
    [1.0, 0.0, 0.0],
    [1.0, 0.0, -0.7071067811865475],
    [1.0, 0.0, 0.7071067811865475],
    [-1.0, 0.0, 1.0],
    [0.0, -1.0, 1.0], [0.0, 1.0, 1.0],
    [-0.7071067811865475, 0.0, 1.0], [0.7071067811865475, 0.0, 1.0],
    [0.0, 0.0, 1.0],
    [0.0, -0.7071067811865475, 1.0], [0.0, 0.7071067811865475, 1.0],
    [-0.7071067811865476, -0.7071067811865476, 1.0],
    [0.7071067811865476, -0.7071067811865476, 1.0],
    [-0.7071067811865476, 0.7071067811865476, 1.0],
    [0.7071067811865476, 0.7071067811865476, 1.0],
    [-1.0, 1.0, 0.0],
    [-0.7071067811865475, 1.0, 0.0], [0.7071067811865475, 1.0, 0.0],
    [0.0, 1.0, 0.0],
    [-0.7071067811865476, 1.0, 0.7071067811865476],
    [-0.7071067811865476, 1.0, -0.7071067811865476],
    [0.7071067811865476, 1.0, 0.7071067811865476],
    [0.7071067811865476, 1.0, -0.7071067811865476],
    [0.0, 1.0, -0.7071067811865475], [0.0, 1.0, 0.7071067811865475]
]

triplets = [[[1.0, 0.0, 1.0], [-1.0, 0.0, 1.0], [0.0, 1.0, 0.0]],[[1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476],[0.7071067811865476, 1.0, -0.7071067811865476]],[[1.0, 1.0, 0.0], [0.0, 0.0, 1.0], [-1.0, 1.0, 0.0]],[[1.0, 1.0, 0.0], [0.7071067811865476, -0.7071067811865476, 1.0],[-0.7071067811865476, 0.7071067811865476, 1.0]],[[1.0, -0.7071067811865476, -0.7071067811865476],[1.0, 0.7071067811865476, 0.7071067811865476], [0.0, -1.0, 1.0]],[[1.0, 0.7071067811865476, -0.7071067811865476],[1.0, -0.7071067811865476, 0.7071067811865476], [0.0, 1.0, 1.0]],[[1.0, -0.7071067811865475, 0.0], [0.0, 0.0, 1.0],[0.7071067811865475, 1.0, 0.0]],[[1.0, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0],[-0.7071067811865475, 1.0, 0.0]],[[1.0, 0.0, 0.0], [0.0, -1.0, 1.0], [0.0, 1.0, 1.0]],[[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]],[[1.0, 0.0, 0.0], [0.0, -0.7071067811865475, 1.0],[0.0, 1.0, 0.7071067811865475]],[[1.0, 0.0, 0.0], [0.0, 0.7071067811865475, 1.0],[0.0, 1.0, -0.7071067811865475]],[[1.0, 0.0, -0.7071067811865475], [0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],[[-1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476],[0.7071067811865476, 1.0, 0.7071067811865476]],[[-0.7071067811865476, -0.7071067811865476, 1.0], [0.7071067811865476, 0.7071067811865476, 1.0], [-1.0, 1.0, 0.0]]]

paires = [[[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],[[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],[[1.0, 0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],[[1.0, 0.7071067811865476, -0.7071067811865476],[-0.7071067811865475, 1.0, 0.0]],[[1.0, -0.7071067811865476, 0.7071067811865476],[-0.7071067811865475, 0.0, 1.0]],[[1.0, -0.7071067811865476, 0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],[[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 0.0, 1.0]],[[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 1.0, 0.0]],[[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, 0.7071067811865476]],[[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, -0.7071067811865476]],[[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],[[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],[[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, -0.7071067811865476, 1.0]],[[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, 0.7071067811865476, 1.0]],[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, -0.7071067811865476, 1.0]],[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, 0.7071067811865476, 1.0]],[[0.0, -0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],[[0.0, -0.7071067811865475, 1.0], [0.7071067811865476, 1.0, 0.7071067811865476]],[[0.0, 0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],[[0.0, 0.7071067811865475, 1.0], [0.7071067811865476, 1.0, -0.7071067811865476]],[[-0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],[[0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],[[-0.7071067811865476, 0.7071067811865476, 1.0],[0.0, 1.0, -0.7071067811865475]],[[0.7071067811865476, 0.7071067811865476, 1.0], [0.0, 1.0, -0.7071067811865475]]]

# --- Utility: map coordinates -> index ---
def list_to_positions(lst: list, reference: list) -> list:
    """
    Replace coordinates with their index in the reference list.

    Parameters
    ----------
    lst : list of lists (triplets or pairs of vectors)
    reference : list of vectors

    Returns
    -------
    list of lists (same structure, but with indices instead of vectors)
    """
    index_map = {tuple(v): i for i, v in enumerate(reference)}
    return [[index_map[tuple(v)] for v in group] for group in lst]

# --- Convert triplets/pairs into indices ---
triplets_pos = list_to_positions(triplets, directionsPeres)
paires_pos = list_to_positions(paires, directionsPeres)

# --- Build edge list (avoid duplicates using set) ---
edges = set()
for pair in paires_pos:
    edges.add(frozenset(pair))
for triplet in triplets_pos:
    for u, v in combinations(triplet, 2):
        edges.add(frozenset([u, v]))

# --- Build graph ---
G = nx.Graph()
for e in edges:
    u, v = tuple(e)
    G.add_edge(u, v)

# --- Plotting options ---
rcParams['figure.dpi'] = 150
plt.figure(figsize=(15, 15))
plt.title("Orthogonality graph of Peres' 33 directions")

# Choose layout (spring_layout gives more symmetric results than circular)
pos = nx.circular_layout(G)

nx.draw_networkx(
    G, pos,
    node_size=80, node_color="black",
    edge_color="gray",
    with_labels=False,
    width=0.7
)

plt.axis("off")
plt.show()

# --- Planarity check ---
is_planar, embedding = nx.check_planarity(G, counterexample=False)
print("Is the graph planar?", is_planar)
