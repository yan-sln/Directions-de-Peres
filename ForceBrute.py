# -*- coding: utf-8 -*-
"""
Created on Sun Nov 26 21:44:10 2023

Author: yan-s

Brute-force exploration of binary assignments for Peres' 33 directions.
Checks orthogonality constraints on 16 triplets and 24 pairs.
"""

# On récupère la liste des 33 directions de Peres déterminées précédemment
directionsPeres = [
[1.0, 0.0, 1.0],
[1.0, 1.0, 0.0],
[1.0, -0.7071067811865476, -0.7071067811865476],
[1.0, 0.7071067811865476, -0.7071067811865476],
[1.0, -0.7071067811865476, 0.7071067811865476],
[1.0, 0.7071067811865476, 0.7071067811865476],
[1.0, -0.7071067811865475, 0.0],
[1.0, 0.7071067811865475, 0.0],
[1.0, 0.0, 0.0],
[1.0, 0.0, -0.7071067811865475],
[1.0, 0.0, 0.7071067811865475],
[-1.0, 0.0, 1.0],
[0.0, -1.0, 1.0],
[0.0, 1.0, 1.0],
[-0.7071067811865475, 0.0, 1.0],
[0.7071067811865475, 0.0, 1.0],
[0.0, 0.0, 1.0],
[0.0, -0.7071067811865475, 1.0],
[0.0, 0.7071067811865475, 1.0],
[-0.7071067811865476, -0.7071067811865476, 1.0],
[0.7071067811865476, -0.7071067811865476, 1.0],
[-0.7071067811865476, 0.7071067811865476, 1.0],
[0.7071067811865476, 0.7071067811865476, 1.0],
[-1.0, 1.0, 0.0],
[-0.7071067811865475, 1.0, 0.0],
[0.7071067811865475, 1.0, 0.0],
[0.0, 1.0, 0.0],
[-0.7071067811865476, 1.0, 0.7071067811865476],
[-0.7071067811865476, 1.0, -0.7071067811865476],
[0.7071067811865476, 1.0, 0.7071067811865476],
[0.7071067811865476, 1.0, -0.7071067811865476],
[0.0, 1.0, -0.7071067811865475],
[0.0, 1.0, 0.7071067811865475]]

# On récupère la liste des 16 triplets déterminées précédemment
triplets = [
[[1.0, 0.0, 1.0], [-1.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476], [0.7071067811865476, 1.0, -0.7071067811865476]],
[[1.0, 1.0, 0.0], [0.0, 0.0, 1.0], [-1.0, 1.0, 0.0]],
[[1.0, 1.0, 0.0], [0.7071067811865476, -0.7071067811865476, 1.0], [-0.7071067811865476, 0.7071067811865476, 1.0]],
[[1.0, -0.7071067811865476, -0.7071067811865476], [1.0, 0.7071067811865476, 0.7071067811865476], [0.0, -1.0, 1.0]],
[[1.0, 0.7071067811865476, -0.7071067811865476], [1.0, -0.7071067811865476, 0.7071067811865476], [0.0, 1.0, 1.0]],
[[1.0, -0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.7071067811865475, 0.0], [0.0, 0.0, 1.0], [-0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.0, 0.0], [0.0, -1.0, 1.0], [0.0, 1.0, 1.0]],
[[1.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[1.0, 0.0, 0.0], [0.0, -0.7071067811865475, 1.0], [0.0, 1.0, 0.7071067811865475]],
[[1.0, 0.0, 0.0], [0.0, 0.7071067811865475, 1.0], [0.0, 1.0, -0.7071067811865475]],
[[1.0, 0.0, -0.7071067811865475], [0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865475, 0.0, 1.0], [0.0, 1.0, 0.0]],
[[-1.0, 0.0, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476], [0.7071067811865476, 1.0, 0.7071067811865476]],
[[-0.7071067811865476, -0.7071067811865476, 1.0], [0.7071067811865476, 0.7071067811865476, 1.0], [-1.0, 1.0, 0.0]]]

# On récupère la liste des 24 paires non déjà présentes dans triplets déterminées précédemment
paires = [
[[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],
[[1.0, -0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.7071067811865476, -0.7071067811865476], [0.7071067811865475, 0.0, 1.0]],
[[1.0, 0.7071067811865476, -0.7071067811865476], [-0.7071067811865475, 1.0, 0.0]],
[[1.0, -0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 0.0, 1.0]],
[[1.0, -0.7071067811865476, 0.7071067811865476], [0.7071067811865475, 1.0, 0.0]],
[[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 0.0, 1.0]],
[[1.0, 0.7071067811865476, 0.7071067811865476], [-0.7071067811865475, 1.0, 0.0]],
[[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, 0.7071067811865476]],
[[1.0, -0.7071067811865475, 0.0], [0.7071067811865476, 1.0, -0.7071067811865476]],
[[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],
[[1.0, 0.7071067811865475, 0.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],
[[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, -0.7071067811865476, 1.0]],
[[1.0, 0.0, -0.7071067811865475], [0.7071067811865476, 0.7071067811865476, 1.0]],
[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, -0.7071067811865476, 1.0]],
[[1.0, 0.0, 0.7071067811865475], [-0.7071067811865476, 0.7071067811865476, 1.0]],
[[0.0, -0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, 0.7071067811865476]],
[[0.0, -0.7071067811865475, 1.0], [0.7071067811865476, 1.0, 0.7071067811865476]],
[[0.0, 0.7071067811865475, 1.0], [-0.7071067811865476, 1.0, -0.7071067811865476]],
[[0.0, 0.7071067811865475, 1.0], [0.7071067811865476, 1.0, -0.7071067811865476]],
[[-0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],
[[0.7071067811865476, -0.7071067811865476, 1.0], [0.0, 1.0, 0.7071067811865475]],
[[-0.7071067811865476, 0.7071067811865476, 1.0], [0.0, 1.0, -0.7071067811865475]],
[[0.7071067811865476, 0.7071067811865476, 1.0], [0.0, 1.0, -0.7071067811865475]]]

def list_to_positions(lst: list, reference: list):
    """
    Replace each vector in lst by its index in the reference list.
    Faster than nested loops thanks to a lookup dictionary.
    """
    index_map = {tuple(v): i for i, v in enumerate(reference)}
    return [[index_map[tuple(v)] for v in group] for group in lst]

def int_to_bin_list(n: int, length: int) -> list:
    """
    Convert integer to binary list of fixed length.
    Example: int_to_bin_list(5, 4) -> [0, 1, 0, 1]
    """
    return [int(x) for x in bin(n)[2:].zfill(length)]

# Convert triplets and pairs to index form
tripletsPosition = list_to_positions(triplets, directionsPeres)
pairesPosition = list_to_positions(paires, directionsPeres)

def force_brute(start: int, n: int):
    """
    Exhaustively search binary assignments of length n.
    Condition (i): each triplet sums to exactly 2.
    Condition (ii): no pair is (0,0).
    """
    max_val = (2**n) - 1
    itr = start

    while itr < max_val:
        itr += 1
        sp = 0  # counter for valid pairs
        st = 0  # counter for valid triplets

        # Current assignment as binary list
        lstBin = int_to_bin_list(itr, n)

        # --- Condition (i): check triplets ---
        for t in tripletsPosition:
            if sum(lstBin[idx] for idx in t) == 2:
                st += 1

        if st == len(tripletsPosition):
            print("Condition (i) satisfied!")
            # --- Condition (ii): check pairs ---
            for p in pairesPosition:
                if not (lstBin[p[0]] == 0 and lstBin[p[1]] == 0):
                    sp += 1
            if sp == len(pairesPosition):
                print("Condition (ii) satisfied!")
                return f"Solution found at iteration {itr}"

    return None  # no solution

# Run the brute-force search (starting from 0, 33 bits)
print(force_brute(0, 33))
# Nota Bene: ~10 iterations per second (infeasible for 2^33 search space)
